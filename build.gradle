apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.google.protobuf'

apply plugin: 'groovy'

group = 'edu.ucsc.soe'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        maven { // The google mirror is less flaky than mavenCentral()
            url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
        maven { url "http://repo.maven.apache.org/maven2" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    mavenLocal()
    jcenter()
}

// updating the version in our release process.
def grpcVersion = '1.17.0' // CURRENT_GRPC_VERSION
def nettyTcNativeVersion = '2.0.17.Final'
def protobufVersion = '3.5.1'
def protocVersion = '3.5.1-1'

dependencies {
    compile "com.google.api.grpc:proto-google-common-protos:1.0.0"
    compile "io.grpc:grpc-alts:${grpcVersion}"
    compile "io.grpc:grpc-netty-shaded:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    // Used in HelloWorldServerTls
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    compile 'org.codehaus.groovy:groovy-all:2.4.5'

    // Weka API
    compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.13'

    testCompile "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.18.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        groovy {
            srcDir 'src/main/groovy'
        }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDir 'src/main/java/io.grpc.replication'
            srcDir 'src/main/java/io.grpc.transprocessing'
        }
    }
}

// Generate IntelliJ IDEA's .idea & .iml project files
apply plugin: 'idea'

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

task replicationServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.replication.ReplicationServer'
    applicationName = 'replication-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task transactionProcessor(type: CreateStartScripts) {
    mainClassName = 'io.grpc.transprocessing.TransactionProcessor'
    applicationName = 'trans-processor'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task transactionSubmitter(type: CreateStartScripts) {
    mainClassName = 'io.grpc.transprocessing.TransactionSubmitter'
    applicationName = 'trans-submitter'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(transactionProcessor)
    from(transactionSubmitter)
    from(replicationServer)
    fileMode = 0755
}